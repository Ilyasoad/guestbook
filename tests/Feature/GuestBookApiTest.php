<?php

namespace Tests\Feature;

use App\Modules\LockModule\Services\LockService;
use App\Modules\MessagesModule\Interfaces\MessageRepositoryInterface;
use App\Modules\MessagesModule\Repositories\XmlMessageRepository;
use App\Modules\MessagesModule\Stores\FakeStore;
use App\Modules\MessagesModule\Validation\AddMessageValidation;
use Tests\CreatesApplication;
use Tests\TestCase;

class GuestBookApiTest extends TestCase
{
    use CreatesApplication;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->rebindMessageStore();
        $this->forgetAddLock();
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testBasicTest()
    {
        $response = $this->get('/api/guestbook');
        $response->assertStatus(200);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testAddMessage()
    {
        $sendData = [
            'nick' => 'nick',
            'text' => 'test message'
        ];
        $response = $this->post($this->getStoreRoute(), $sendData);

        $response->assertJson($sendData, true);
        $response->assertStatus(200);
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function testAddInvalidMessage()
    {
        $response = $this->post($this->getStoreRoute(), []);
        $response->assertSessionHasErrors([
            'nick',
            'text'
        ]);
    }

    public function testAddToMessagesBeforeLock()
    {
        $sendData = [
            'nick' => 'nick',
            'text' => 'test message'
        ];
        $route = $this->getStoreRoute();
        $this
            ->post($route, $sendData)
            ->assertStatus(200);
        $this
            ->post($route, $sendData)
            ->assertStatus(500);
    }

    public function testAnswerMessage()
    {
        $firstData = [
            'nick' => 'nick',
            'text' => 'test message'
        ];
        $firstMessage = $this->post($this->getStoreRoute(), $firstData);
        $firstMessage->assertStatus(200);
        $firstMessageData = json_decode($firstMessage->getContent());
        $this->forgetAddLock();

        $secondData = [
            'nick' => 'nick2',
            'text' => 'test message2',
            'parentUuid' => $firstMessageData->uuid
        ];
        $secondMessage = $this->post($this->getStoreRoute(), $secondData);
        $secondMessage->assertStatus(200);
        $secondMessage->assertJson($secondData);
        $secondMessageData = json_decode($secondMessage->getContent());

        $this->forgetAddLock();

        $thirdData = [
            'nick' => 'nick3',
            'text' => 'test message ddd',
            'parentUuid' => $secondMessageData->uuid,
        ];

        $thirdMessage = $this->post($this->getStoreRoute(), $thirdData);
        $thirdMessage->assertStatus(200);
        $thirdMessageData = json_decode($thirdMessage->getContent());

        $this->forgetAddLock();

        $fourthData = [
            'nick' => 'nick3',
            'text' => 'test message ddd',
            'parentUuid' => $thirdMessageData->uuid,
        ];

        $fourthMessage = $this->post($this->getStoreRoute(), $fourthData);
        $fourthMessage->assertStatus(500);
    }

    public function testEditMessage()
    {
        $data = [
            'nick' => 'nick',
            'text' => 'test message'
        ];
        $message = $this->post($this->getStoreRoute(), $data);
        $message->assertStatus(200);
        $messageData = json_decode($message->getContent());

        $updateRoute = route('guestbook.update', ['guestbook' => $messageData->uuid]);
        $data['nick'] = 'nick2';
        $updateMessage = $this->put($updateRoute, $data);

        $updateMessage->assertStatus(200);

        $showRoute = route('guestbook.show', ['guestbook' => $messageData->uuid]);
        $checkMessage = $this->get($showRoute);
        $checkMessage->assertStatus(200);
        $checkMessage->assertJson($data);
    }

    public function testShowUndefinedMessage()
    {
        $showRoute = route('guestbook.show', ['guestbook' => '00000000-0000-0000-0000-000000000001']);
        $checkMessage = $this->get($showRoute);
        $checkMessage->assertStatus(404);
    }

    public function testEditUndefinedMessage()
    {
        $showRoute = route('guestbook.update', ['guestbook' => '00000000-0000-0000-0000-000000000002']);
        $checkMessage = $this->put($showRoute, ['text' => 'a', 'nick' => 'b']);
        $checkMessage->assertStatus(404);
    }

    private function rebindMessageStore()
    {
        $store = new FakeStore();

        $this->app->bind(MessageRepositoryInterface::class, function () use ($store) {
            return new XmlMessageRepository($store);
        });
    }

    private function getStoreRoute(): string
    {
        return route('guestbook.store');
    }

    private function forgetAddLock()
    {
        (new LockService)->unlock(AddMessageValidation::LOCK_KEY);
    }
}
